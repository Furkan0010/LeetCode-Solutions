public class Solution {
    public void Merge(int[] nums1, int m, int[] nums2, int n) {
        List<int> number1 = new List<int>(nums1);
        List<int> number2 = new List<int>(nums2);
        List<int> numberSorting = new List<int>();

        for (int i = 0; i < m; i++) {
            numberSorting.Add(nums1[i]); 
        }

        for (int i = 0; i < n; i++) {
            numberSorting.Add(nums2[i]);
        }

        for (int i = 0; i < numberSorting.Count; i++) {
            for (int j = i + 1; j < numberSorting.Count; j++) {
                if (numberSorting[i] > numberSorting[j]) {
                    int temp = numberSorting[i];
                    numberSorting[i] = numberSorting[j];
                    numberSorting[j] = temp;
                }
            }
        }

        for (int k = 0; k < numberSorting.Count; k++){
            nums1[k] = numberSorting[k];
        }
            
    }
}


// gpt çözümü

public class Solution {
    public void Merge(int[] nums1, int m, int[] nums2, int n) {
        int i = m - 1;         // nums1'in son dolu elemanı
        int j = n - 1;         // nums2'nin son elemanı
        int k = m + n - 1;     // nums1'in son indexi (boş dahil)

        while (i >= 0 && j >= 0) {
            if (nums1[i] > nums2[j]) {
                nums1[k] = nums1[i];
                i--;
            } else {
                nums1[k] = nums2[j];
                j--;
            }
            k--;
        }

        // nums2'de kalan elemanlar varsa kopyala
        while (j >= 0) {
            nums1[k] = nums2[j];
            j--;
            k--;
        }
    }
}
